/*
 * generated by Xtext
 */
package ssma.fml.validation

import com.google.inject.Inject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.validation.Check
import ssma.fml.fmlDsl.AndFml
import ssma.fml.fmlDsl.CompareFml
import ssma.fml.fmlDsl.EquivFml
import ssma.fml.fmlDsl.FmlDslPackage
import ssma.fml.fmlDsl.ImpliesFml
import ssma.fml.fmlDsl.MultDiv
import ssma.fml.fmlDsl.NegFml
import ssma.fml.fmlDsl.OrFml
import ssma.fml.fmlDsl.PlusMinus

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class FmlDslValidator extends AbstractFmlDslValidator {

	public static val WRONG_TYPE = "ssma.fml.WrongType"

	@Inject extension FmlDslValidatorHelper
	
	// just to make error accessible from FmlDslValidatorHelper
	def perror(String s, EStructuralFeature f, String id){
		error(s,f,id)
	}

	@Check
	def checkType(EquivFml e) {
		checkExpectedBoolean(e.left, FmlDslPackage.Literals::EQUIV_FML__LEFT)
		checkExpectedBoolean(e.right, FmlDslPackage.Literals::EQUIV_FML__RIGHT)
	}

	@Check
	def checkType(ImpliesFml e) {
		checkExpectedBoolean(e.left, FmlDslPackage.Literals::IMPLIES_FML__LEFT)
		checkExpectedBoolean(e.right, FmlDslPackage.Literals::IMPLIES_FML__RIGHT)
	}

	@Check
	def checkType(OrFml e) {
		checkExpectedBoolean(e.left, FmlDslPackage.Literals::OR_FML__LEFT)
		checkExpectedBoolean(e.right, FmlDslPackage.Literals::OR_FML__RIGHT)
	}

	@Check
	def checkType(AndFml e) {
		checkExpectedBoolean(e.left, FmlDslPackage.Literals::AND_FML__LEFT)
		checkExpectedBoolean(e.right, FmlDslPackage.Literals::AND_FML__RIGHT)
	}

	@Check
	def checkType(CompareFml e) {
		checkExpectedInt(e.left, FmlDslPackage.Literals::COMPARE_FML__LEFT)
		checkExpectedInt(e.right, FmlDslPackage.Literals::COMPARE_FML__RIGHT)
	}

	@Check
	def checkType(PlusMinus e) {
		checkExpectedInt(e.left, FmlDslPackage.Literals::PLUS_MINUS__LEFT)
		checkExpectedInt(e.right, FmlDslPackage.Literals::PLUS_MINUS__RIGHT)
	}

	@Check
	def checkType(MultDiv e) {
		checkExpectedInt(e.left, FmlDslPackage.Literals::MULT_DIV__LEFT)
		checkExpectedInt(e.right, FmlDslPackage.Literals::MULT_DIV__RIGHT)
	}

	@Check
	def checkType(NegFml e) {
		checkExpectedBoolean(e.t, FmlDslPackage.Literals::NEG_FML__T)
	}


}
