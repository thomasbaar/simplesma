/*
 * generated by Xtext
 */
package ssma.frontend.pn.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import ssma.frontend.pn.pnDsl.PnModel
import ssma.frontend.pn.pnDsl.Place
import com.google.inject.Inject
import ssma.frontend.pn.printing.PnDslPrinter

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PnDslGenerator implements IGenerator {
	
		@Inject extension PnDslPrinter
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
	
	
	val model = resource.allContents
				.filter(typeof(PnModel)).head
	
			fsa.generateFile(modelname(model)+'.sminv',// 
			compile(model))
	}
	
	def String modelname(PnModel model){
		if (model.name != null){
			model.name
		}else{
			'default'
		}
	}
	
	
	// write the destination file
	// implementation here is oriented on structure of destination file
	def compile(PnModel model){
		  model.printProject  
		+ model.printVars
		+ model.printStates
		+ model.printEvents
		+ model.printTransitions
		+ model.printInvariants
	}


	def String printProject(PnModel model){
		'''
project «modelname(model)»
		'''
	}
	
	
	def String printVars(PnModel model){
		'''
vars «FOR place : model.pd.places» «place.name»«ENDFOR»
		'''
	}
	
	def String printStates(PnModel model){
		'''
states start s // just one global state
		'''
	}
	
	def String printEvents(PnModel model){
		'''
events «FOR trans : model.ts.trans» «trans.name»«ENDFOR»
		'''
	}
	
	def String printTransitions(PnModel model){
		'''
transitions		
start => s	/   // initial state	
«FOR place : model.pd.places» 
«place.sub_printInitMarking(model)»
«ENDFOR»;

«FOR trans : model.ts.trans» 
s => s «trans.name» [«trans.prePlaces.map[name + '== 1'].join(' && ')»]
      / «trans.prePlaces.map[name + '-= 1'].join(' ')» «trans.postPlaces.map[name + '+= 1'].join(' ')»;

«ENDFOR»

		'''
	}
	
	def String sub_printInitMarking(Place p, PnModel model){
		if (model.ip.marked.contains(p)){
			p.name + " = 1"
		}else{
			p.name + " = 0"
		}
	}
	
	
	def String printInvariants(PnModel model){
		'''
invariants

«FOR inv : model.inv.inv»
 s : «inv.body.stringRepr» ;
 «ENDFOR»
		'''
	}
	

}
