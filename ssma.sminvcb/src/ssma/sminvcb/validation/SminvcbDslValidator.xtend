/*
 * generated by Xtext 2.10.0
 */
package ssma.sminvcb.validation

import com.google.inject.Inject
import org.eclipse.xtext.validation.Check
import ssma.sminv.sminvDsl.VarRef
import ssma.sminvcb.sminvcbDsl.GlobalPred
import ssma.sminvcb.sminvcbDsl.SminvcbDslPackage
import ssma.sminvcb.sminvcbDsl.StatePred

import static extension org.eclipse.xtext.EcoreUtil2.*
import static extension ssma.sminvcb.util.SminvcbDslUtil.*
import ssma.sminvcb.sminvcbDsl.SminvcbModel

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SminvcbDslValidator extends AbstractSminvcbDslValidator {
	@Inject extension SminvcbDslValidatorHelper
	
	public static val STATEPRED_ONLY_WITH_CODEVARS = "statepred.only.with.codevars"
	
	@Check(NORMAL)
	def checkStatePredAreBoolean(StatePred p) {
		checkExpectedBoolean(p.pred, SminvcbDslPackage.Literals.STATE_PRED__PRED)
	}
	
	@Check(NORMAL)
	def checkGlobalPredAreBoolean(GlobalPred p) {
		checkExpectedBoolean(p.pred, SminvcbDslPackage.Literals.GLOBAL_PRED__PRED)
	}

	@Check(NORMAL)
	def checkStatePredOnlyWithCodevars(StatePred p) {
		val stateVars = p.getAllContentsOfType(VarRef).filter[! v.isCodeVar]
		if(	! stateVars.isEmpty){
//			for(sv:stateVars){
				//TODO: mark the single statevar
				error(
					"Only codevars are allowed in state-preds",
					SminvcbDslPackage.Literals.STATE_PRED__PRED,
					STATEPRED_ONLY_WITH_CODEVARS
				)
//			}
		}
	}
	
////	@Check(EXPENSIVE)
//	@Check(NORMAL)
//	def poorMansInvocation(SminvcbModel m) {
////		println("Hello from Validation")
//	
//			myInvoke("mylib.MyLib")
//	}
//	
//	def myInvoke(String cn) {
//		
//		val parentCL = this.class.getClassLoader()
//		
//		val clazz = parentCL.loadClass(cn)
//		
//		val method = clazz.getMethod("doSmth");
//		method.invoke(null);
//	}
	
	
}
