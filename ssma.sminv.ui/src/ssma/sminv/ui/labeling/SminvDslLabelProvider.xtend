/*
 * generated by Xtext 2.10.0
 */
package ssma.sminv.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import ssma.sminv.sminvDsl.VarDecl
import ssma.sminv.sminvDsl.StateDecl
import ssma.sminv.sminvDsl.EventDecl
import ssma.sminv.sminvDsl.TransDecl
import ssma.sminv.sminvDsl.InvDecl
import ssma.sminv.sminvDsl.Transition
import ssma.sminv.sminvDsl.Inv
import ssma.sminv.sminvDsl.NegFml
import ssma.sminv.sminvDsl.Compound
import ssma.sminv.sminvDsl.IntConstant
import ssma.sminv.sminvDsl.VarRef
import ssma.sminv.sminvDsl.Var


/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class SminvDslLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	//
	// Declaration nodes
	//
	
	def text(VarDecl d) {
		"vars"
	}
	
	def text(StateDecl d) {
		"states"
	}
	
	def text(EventDecl d) {
		"events"
	}
	
	def text(TransDecl d) {
		"transitions"
	}
	
	def text(InvDecl d) {
		"invariants"
	}
	
	//
	// Transition and invariants and updates
	// 
	
	def text(Transition t) {
		t.pre.name + " => " + t.post.name
	}
	
	def text(Inv i) {
		i.state.name + ": "
	}
	
	// can occur within updates
	def text(Var v) {
		v.name
	}
	
	//
	// Rewritten Atomic terms
	//
	
	def text(NegFml f) {
		"!"
	}
	
	def text(Compound f) {
		"()"
	}
	
	def text(IntConstant i) {
		i.value + ""
	}
	
	def text(VarRef vr) {
		vr.v.name
	}
	
	
	//
	// Outline-definitions from Fml-language
	//
	//TODO: how can we say, that all other terms (e.g. <-> ) should be outlined
	//      as defined in the fml-project ????
	
}
